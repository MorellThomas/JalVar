--- build.gradle	2023-07-02 09:21:09.216542293 +0200
+++ ../jalview_new/build.gradle	2023-05-15 19:20:46.892861180 +0200
@@ -45,8 +45,8 @@
   id 'java'
   id 'application'
   id 'eclipse'
-  id "com.diffplug.gradle.spotless" version "3.28.0"
-  id 'com.github.johnrengelman.shadow' version '4.0.3'
+  id "com.diffplug.spotless" version "6.18.0" //.gradle.spotless" "3.28.0"
+  id 'com.github.johnrengelman.shadow' version '8.1.1'	// was 4.0.3
   id 'com.install4j.gradle' version '9.0.6'
   id 'com.dorongold.task-tree' version '2.1.0' // only needed to display task dependency tree with  gradle task1 [task2 ...] taskTree
   id 'com.palantir.git-version' version '0.13.0' apply false
@@ -183,6 +183,7 @@
   testDir = string("${jalviewDir}/${bareTestSourceDir}")
 
   classesDir = string("${jalviewDir}/${classes_dir}")
+  destinationDirectory = file(classesDir)
 
   // clover
   useClover = clover.equals("true")
@@ -547,14 +548,14 @@
   main {
     java {
       srcDirs sourceDir
-      outputDir = file(classesDir)
+      destinationDirectory = file(classesDir)
     }
 
     resources {
       srcDirs = [ resourcesBuildDir, docBuildDir, helpBuildDir ]
     }
 
-    compileClasspath = files(sourceSets.main.java.outputDir)
+    compileClasspath = files(sourceSets.main.java.destinationDirectory)
     compileClasspath += fileTree(dir: "${jalviewDir}/${libDir}", include: ["*.jar"])
 
     runtimeClasspath = compileClasspath
@@ -564,14 +565,14 @@
   clover {
     java {
       srcDirs cloverInstrDir
-      outputDir = cloverClassesDir
+      destinationDirectory = cloverClassesDir
     }
 
     resources {
       srcDirs = sourceSets.main.resources.srcDirs
     }
 
-    compileClasspath = files( sourceSets.clover.java.outputDir )
+    compileClasspath = files( sourceSets.clover.java.destinationDirectory )
     //compileClasspath += files( testClassesDir )
     compileClasspath += fileTree(dir: "${jalviewDir}/${libDir}", include: ["*.jar"])
     compileClasspath += fileTree(dir: "${jalviewDir}/${clover_lib_dir}", include: ["*.jar"])
@@ -583,14 +584,14 @@
   test {
     java {
       srcDirs testSourceDir
-      outputDir = file(testClassesDir)
+      destinationDirectory = file(testClassesDir)
     }
 
     resources {
       srcDirs = useClover ? sourceSets.clover.resources.srcDirs : sourceSets.main.resources.srcDirs
     }
 
-    compileClasspath = files( sourceSets.test.java.outputDir )
+    compileClasspath = files( sourceSets.test.java.destinationDirectory )
     compileClasspath += useClover ? sourceSets.clover.compileClasspath : sourceSets.main.compileClasspath
     compileClasspath += fileTree(dir: "${jalviewDir}/${utils_dir}/testnglibs", include: ["**/*.jar"])
 
@@ -615,7 +616,7 @@
   }
 
   classpath {
-    //defaultOutputDir = sourceSets.main.java.outputDir
+    //defaultOutputDir = sourceSets.main.java.destinationDirectory
     configurations.each{ c->
       if (c.isCanBeResolved()) {
         minusConfigurations += [c]
@@ -654,7 +655,7 @@
         HashMap<String, Boolean> alreadyAddedLibPath = new HashMap<>();
 
         sourceSets.main.compileClasspath.findAll { it.name.endsWith(".jar") }.any {
-          //don't want to add outputDir as eclipse is using its own output dir in bin/main
+          //don't want to add destinationDirectory as eclipse is using its own output dir in bin/main
           if (it.isDirectory() || ! it.exists()) {
             // don't add dirs to classpath, especially if they don't exist
             return false // groovy "continue" in .any closure
@@ -674,7 +675,7 @@
         }
 
         sourceSets.test.compileClasspath.findAll { it.name.endsWith(".jar") }.any {
-          //no longer want to add outputDir as eclipse is using its own output dir in bin/main
+          //no longer want to add destinationDirectory as eclipse is using its own output dir in bin/main
           if (it.isDirectory() || ! it.exists()) {
             // don't add dirs to classpath
             return false // groovy "continue" in .any closure
@@ -1051,7 +1052,7 @@
 
 clean {
   doFirst {
-    delete sourceSets.main.java.outputDir
+    delete sourceSets.main.java.destinationDirectory
   }
 }
 
@@ -1059,7 +1060,7 @@
 cleanTest {
   dependsOn cleanClover
   doFirst {
-    delete sourceSets.test.java.outputDir
+    delete sourceSets.test.java.destinationDirectory
   }
 }
 
@@ -1151,7 +1152,7 @@
 
 task copyDocs(type: Copy) {
   def inputDir = "${jalviewDir}/${doc_dir}"
-  def outputDir = "${docBuildDir}/${doc_dir}"
+  def destinationDirectory = "${docBuildDir}/${doc_dir}"
   from(inputDir) {
     include('**/*.txt')
     include('**/*.md')
@@ -1172,10 +1173,10 @@
     exclude('**/*.html')
     exclude('**/*.xml')
   }
-  into outputDir
+  into destinationDirectory
 
   inputs.dir(inputDir)
-  outputs.dir(outputDir)
+  outputs.dir(destinationDirectory)
 }
 
 
@@ -1240,15 +1241,15 @@
       }
       if (inFrontMatter) {
         def m = null
-        if (m = line =~ /^date:\s*(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/) {
+        if (m == line =~ /^date:\s*(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/) {
           map["date"] = new Date().parse("yyyy-MM-dd HH:mm:ss", m[0][1])
-        } else if (m = line =~ /^date:\s*(\d{4}-\d{2}-\d{2})/) {
+        } else if (m == line =~ /^date:\s*(\d{4}-\d{2}-\d{2})/) {
           map["date"] = new Date().parse("yyyy-MM-dd", m[0][1])
-        } else if (m = line =~ /^channel:\s*(\S+)/) {
+        } else if (m == line =~ /^channel:\s*(\S+)/) {
           map["channel"] = m[0][1]
-        } else if (m = line =~ /^version:\s*(\S+)/) {
+        } else if (m == line =~ /^version:\s*(\S+)/) {
           map["version"] = m[0][1]
-        } else if (m = line =~ /^\s*([^:]+)\s*:\s*(\S.*)/) {
+        } else if (m == line =~ /^\s*([^:]+)\s*:\s*(\S.*)/) {
           map[ m[0][1] ] = m[0][2]
         }
         if (dateOnly && map["date"] != null) {
@@ -1307,7 +1308,7 @@
       def inSection = false
       changes.eachLine { line ->
         def m = null
-        if (m = line =~ /^##([^#].*)$/) {
+        if (m == line =~ /^##([^#].*)$/) {
           if (inSection) {
             changesHugo += "</div>\n\n"
           }
@@ -1317,7 +1318,7 @@
           section = section.replaceAll(/[^a-z0-9_\-]/, "")
           changesHugo += "<div class=\"${section}\">\n\n"
           inSection = true
-        } else if (m = line =~ /^(\s*-\s*)<!--([^>]+)-->(.*?)(<br\/?>)?\s*$/) {
+        } else if (m == line =~ /^(\s*-\s*)<!--([^>]+)-->(.*?)(<br\/?>)?\s*$/) {
           def comment = m[0][2].trim()
           if (comment != "") {
             comment = comment.replaceAll('"', "&quot;")
@@ -1387,7 +1388,7 @@
   def sectionName = null
   content.eachLine { line ->
     def m = null
-    if (m = line =~ /^##([^#].*)$/) {
+    if (m == line =~ /^##([^#].*)$/) {
       if (sectionName != null) {
         sections[sectionName] = sectionContent
         sectionName = null
@@ -1410,7 +1411,7 @@
 
 task copyHelp(type: Copy) {
   def inputDir = helpSourceDir
-  def outputDir = "${helpBuildDir}/${help_dir}"
+  def destinationDirectory = "${helpBuildDir}/${help_dir}"
   from(inputDir) {
     include('**/*.txt')
     include('**/*.md')
@@ -1435,14 +1436,15 @@
     exclude('**/*.xml')
     exclude('**/*.jhm')
   }
-  into outputDir
+  into destinationDirectory
 
   inputs.dir(inputDir)
   outputs.files(helpFile)
-  outputs.dir(outputDir)
+  outputs.dir(destinationDirectory)
 }
 
 
+/*
 task releasesTemplates {
   group "help"
   description "Recreate whatsNew.html and releases.html from markdown files and templates in help"
@@ -1519,9 +1521,9 @@
       def lm = null
       def rContentProcessed = ""
       rContent.eachLine { line ->
-        if (lm = line =~ /^(\s*-)(\s*<!--[^>]*?-->)(.*)$/) {
+        if (lm == line =~ /^(\s*-)(\s*<!--[^>]*?-->)(.*)$/) {
           line = "${lm[0][1]}${lm[0][3]}${lm[0][2]}"
-      } else if (lm = line =~ /^###([^#]+.*)$/) {
+      } else if (lm == line =~ /^###([^#]+.*)$/) {
           line = "_${lm[0][1].trim()}_"
         }
         rContentProcessed += line + "\n"
@@ -1579,13 +1581,14 @@
   outputs.file(whatsnewHtmlFile)
 }
 
+*/
 
 task copyResources(type: Copy) {
   group = "build"
   description = "Copy (and make text substitutions in) the resources dir to the build area"
 
   def inputDir = resourceDir
-  def outputDir = resourcesBuildDir
+  def destinationDirectory = resourcesBuildDir
   from(inputDir) {
     include('**/*.txt')
     include('**/*.md')
@@ -1606,10 +1609,10 @@
     exclude('**/*.html')
     exclude('**/*.xml')
   }
-  into outputDir
+  into destinationDirectory
 
   inputs.dir(inputDir)
-  outputs.dir(outputDir)
+  outputs.dir(destinationDirectory)
 }
 
 task copyChannelResources(type: Copy) {
@@ -1618,16 +1621,17 @@
   description = "Copy the channel resources dir to the build resources area"
 
   def inputDir = "${channelDir}/${resource_dir}"
-  def outputDir = resourcesBuildDir
+  def destinationDirectory = resourcesBuildDir
   from inputDir
-  into outputDir
+  into destinationDirectory
 
   inputs.dir(inputDir)
-  outputs.dir(outputDir)
+  outputs.dir(destinationDirectory)
 }
 
 task createBuildProperties(type: WriteProperties) {
   dependsOn copyResources
+  dependsOn copyChannelResources
   group = "build"
   description = "Create the ${buildProperties} file"
   
@@ -1651,6 +1655,7 @@
 
 task buildIndices(type: JavaExec) {
   dependsOn copyHelp
+  //dependsOn releasesTemplates
   classpath = sourceSets.main.compileClasspath
   main = "com.sun.java.help.search.Indexer"
   workingDir = "${helpBuildDir}/${help_dir}"
@@ -1678,15 +1683,25 @@
   dependsOn buildResources
   dependsOn copyDocs
   dependsOn copyHelp
-  dependsOn releasesTemplates
+  //dependsOn releasesTemplates
   dependsOn convertMdFiles
   dependsOn buildIndices
 }
 
 
+// random block of dependencies
 compileJava.dependsOn prepare
 run.dependsOn compileJava
 //run.dependsOn prepare
+compileTestJava.dependsOn compileJava //
+compileTestJava.dependsOn buildIndices //
+processResources.dependsOn copyChannelResources //
+processResources.dependsOn copyResources //
+processResources.dependsOn createBuildProperties //
+processResources.dependsOn copyDocs //
+processResources.dependsOn convertMdFiles //
+processResources.dependsOn copyHelp //
+processResources.dependsOn buildIndices //
 
 
 //testReportDirName = "test-reports" // note that test workingDir will be $jalviewDir
@@ -1731,6 +1746,7 @@
 }
 
 
+/*
 task compileLinkCheck(type: JavaCompile) {
   options.fork = true
   classpath = files("${jalviewDir}/${utils_dir}")
@@ -1765,6 +1781,7 @@
   inputs.dir(helpBuildDir)
   outputs.file(helpLinksCheckerOutFile)
 }
+*/
 
 
 // import the pubhtmlhelp target
@@ -1779,10 +1796,14 @@
   }
 }
 
+// block of dependencies
+//compileTestJava.dependsOn compileLinkCheck //
+//copyChannelResources.dependsOn compileLinkCheck //
+//convertMdFiles.dependsOn compileLinkCheck //
 
 jar {
   dependsOn prepare
-  dependsOn linkCheck
+  dependsOn //linkCheck
 
   manifest {
     attributes "Main-Class": main_class,
@@ -1792,8 +1813,8 @@
     "Implementation-Version": JALVIEW_VERSION
   }
 
-  def outputDir = "${jalviewDir}/${package_dir}"
-  destinationDirectory = file(outputDir)
+  def destinationDirectory = "${jalviewDir}/${package_dir}"
+  destinationDirectory = file(destinationDirectory)
   archiveFileName = rootProject.name+".jar"
   duplicatesStrategy "EXCLUDE"
 
@@ -1804,11 +1825,11 @@
   exclude "**/*.jar"
   exclude "**/*.jar.*"
 
-  inputs.dir(sourceSets.main.java.outputDir)
+  inputs.dir(sourceSets.main.java.destinationDirectory)
   sourceSets.main.resources.srcDirs.each{ dir ->
     inputs.dir(dir)
   }
-  outputs.file("${outputDir}/${archiveFileName}")
+  outputs.file("${destinationDirectory}/${archiveFileName}")
 }
 
 
@@ -1867,7 +1888,7 @@
 
   mainClassName = shadow_jar_main_class
   mergeServiceFiles()
-  classifier = "all-"+JALVIEW_VERSION+"-j"+JAVA_VERSION
+  archiveClassifier = "all-"+JALVIEW_VERSION+"-j"+JAVA_VERSION
   minimize()
 }
 
@@ -2922,10 +2943,10 @@
 
   def inputFiles = fileTree(dir: "${jalviewDir}/${jalviewjs_eclipse_dropins_dir}", include: "*.jar")
   inputFiles += file("${jalviewDir}/${jalviewjsJ2sPlugin}")
-  def outputDir = "${jalviewDir}/${jalviewjsBuildDir}/${jalviewjs_eclipse_tmp_dropins_dir}"
+  def destinationDirectory = "${jalviewDir}/${jalviewjsBuildDir}/${jalviewjs_eclipse_tmp_dropins_dir}"
 
   from inputFiles
-  into outputDir
+  into destinationDirectory
 }
 
 
@@ -3033,13 +3054,13 @@
   dependsOn jalviewjsTransferUnzipAllLibs
   def inputFiles = fileTree(dir: "${jalviewDir}/${jalviewjsTransferSiteLibDir}")
   inputFiles += fileTree(dir: "${jalviewDir}/${jalviewjsTransferSiteSwingJsDir}")
-  def outputDir = "${jalviewDir}/${jalviewjsSiteDir}"
+  def destinationDirectory = "${jalviewDir}/${jalviewjsSiteDir}"
 
   from inputFiles
-  into outputDir
+  into destinationDirectory
   def outputFiles = []
   rename { filename ->
-    outputFiles += "${outputDir}/${filename}"
+    outputFiles += "${destinationDirectory}/${filename}"
     null
   }
   preserve {
@@ -3058,13 +3079,13 @@
   dependsOn buildResources
 
   def inputFiles = fileTree(dir: resourcesBuildDir)
-  def outputDir = "${jalviewDir}/${jalviewjsSiteDir}/${jalviewjs_j2s_subdir}"
+  def destinationDirectory = "${jalviewDir}/${jalviewjsSiteDir}/${jalviewjs_j2s_subdir}"
 
   from inputFiles
-  into outputDir
+  into destinationDirectory
   def outputFiles = []
   rename { filename ->
-    outputFiles += "${outputDir}/${filename}"
+    outputFiles += "${destinationDirectory}/${filename}"
     null
   }
   preserve {
@@ -3077,13 +3098,13 @@
 
 task jalviewjsSyncSiteResources (type: Sync) {
   def inputFiles = fileTree(dir: "${jalviewDir}/${jalviewjs_site_resource_dir}")
-  def outputDir = "${jalviewDir}/${jalviewjsSiteDir}"
+  def destinationDirectory = "${jalviewDir}/${jalviewjsSiteDir}"
 
   from inputFiles
-  into outputDir
+  into destinationDirectory
   def outputFiles = []
   rename { filename ->
-    outputFiles += "${outputDir}/${filename}"
+    outputFiles += "${destinationDirectory}/${filename}"
     null
   }
   preserve {
@@ -3097,13 +3118,13 @@
 task jalviewjsSyncBuildProperties (type: Sync) {
   dependsOn createBuildProperties
   def inputFiles = [file(buildProperties)]
-  def outputDir = "${jalviewDir}/${jalviewjsSiteDir}/${jalviewjs_j2s_subdir}"
+  def destinationDirectory = "${jalviewDir}/${jalviewjsSiteDir}/${jalviewjs_j2s_subdir}"
 
   from inputFiles
-  into outputDir
+  into destinationDirectory
   def outputFiles = []
   rename { filename ->
-    outputFiles += "${outputDir}/${filename}"
+    outputFiles += "${destinationDirectory}/${filename}"
     null
   }
   preserve {
@@ -3322,7 +3343,7 @@
   def swingJ2sDir = "${jalviewDir}/${jalviewjsTransferSiteSwingJsDir}/${jalviewjs_j2s_subdir}"
   def libJ2sDir = "${jalviewDir}/${jalviewjsTransferSiteLibDir}/${jalviewjs_j2s_subdir}"
   def jsDir = "${jalviewDir}/${jalviewjsTransferSiteSwingJsDir}/${jalviewjs_js_subdir}"
-  def outputDir = "${jalviewDir}/${jalviewjsTransferSiteCoreDir}/${jalviewjs_j2s_subdir}/core"
+  def destinationDirectory = "${jalviewDir}/${jalviewjsTransferSiteCoreDir}/${jalviewjs_j2s_subdir}/core"
   def prefixFile = "${jsDir}/core/coretop2.js"
   def suffixFile = "${jsDir}/core/corebottom2.js"
 
@@ -3366,8 +3387,8 @@
     }
     def list = fileTree(dir: j2sDir, includes: filelist)
 
-    def jsfile = "${outputDir}/core${name}.js"
-    def zjsfile = "${outputDir}/core${name}.z.js"
+    def jsfile = "${destinationDirectory}/core${name}.js"
+    def zjsfile = "${destinationDirectory}/core${name}.z.js"
 
     jalviewjsCoreClasslists += [
       'jsfile': jsfile,
@@ -3385,8 +3406,8 @@
   // _stevesoft core. add any cores without a classlist here (and the inputs and outputs)
   def stevesoftClasslistName = "_stevesoft"
   def stevesoftClasslist = [
-    'jsfile': "${outputDir}/core${stevesoftClasslistName}.js",
-    'zjsfile': "${outputDir}/core${stevesoftClasslistName}.z.js",
+    'jsfile': "${destinationDirectory}/core${stevesoftClasslistName}.js",
+    'zjsfile': "${destinationDirectory}/core${stevesoftClasslistName}.z.js",
     'list': fileTree(dir: j2sDir, include: "com/stevesoft/pat/**/*.js"),
     'name': stevesoftClasslistName
   ]
@@ -3419,8 +3440,8 @@
     ]
   )
   def allClasslist = [
-    'jsfile': "${outputDir}/core${allClasslistName}.js",
-    'zjsfile': "${outputDir}/core${allClasslistName}.z.js",
+    'jsfile': "${destinationDirectory}/core${allClasslistName}.js",
+    'zjsfile': "${destinationDirectory}/core${allClasslistName}.z.js",
     'list': allJsFiles,
     'name': allClasslistName
   ]
@@ -3473,11 +3494,11 @@
   dependsOn jalviewjsBuildAllCores
   def inputFileName = "${jalviewDir}/${j2s_coretemplate_html}"
   def inputFile = file(inputFileName)
-  def outputDir = "${jalviewDir}/${jalviewjsTransferSiteCoreDir}"
+  def destinationDirectory = "${jalviewDir}/${jalviewjsTransferSiteCoreDir}"
 
   def outputFiles = []
   jalviewjsCoreClasslists.each { cl ->
-    def outputFile = "${outputDir}/${jalviewjsJalviewTemplateName}_${cl.name}.html"
+    def outputFile = "${destinationDirectory}/${jalviewjsJalviewTemplateName}_${cl.name}.html"
     cl['outputfile'] = outputFile
     outputFiles += outputFile
   }
@@ -3496,13 +3517,13 @@
   dependsOn jalviewjsBuildAllCores
   dependsOn jalviewjsPublishCoreTemplates
   def inputFiles = fileTree(dir: "${jalviewDir}/${jalviewjsTransferSiteCoreDir}")
-  def outputDir = "${jalviewDir}/${jalviewjsSiteDir}"
+  def destinationDirectory = "${jalviewDir}/${jalviewjsSiteDir}"
 
   from inputFiles
-  into outputDir
+  into destinationDirectory
   def outputFiles = []
   rename { filename ->
-    outputFiles += "${outputDir}/${filename}"
+    outputFiles += "${destinationDirectory}/${filename}"
     null
   }
   preserve {
